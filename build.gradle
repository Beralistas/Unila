plugins {
    id 'java'
}

version '1.0'

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

repositories {
    mavenCentral()
    maven { url 'https://www.jitpack.io' }
}

ext {
    // Use a stable v8 version that exists on JitPack
    // Try v147, v148, v149, or v150 if v150.1 doesn't work
    mindustryVersion = 'v150'
    // Alternative versions to try:
    // mindustryVersion = 'v149'
    // mindustryVersion = 'v148'
    // mindustryVersion = 'v147'
}

dependencies {
    compileOnly "com.github.Anuken.Mindustry:core:$mindustryVersion"
    compileOnly "com.github.Anuken.Mindustry:server:$mindustryVersion"
    compileOnly "com.github.Anuken.Arc:arc-core:$mindustryVersion"
    
    // If you still have issues, try using the full Mindustry dependency
    // compileOnly "com.github.Anuken:Mindustry:$mindustryVersion"
}

jar {
    archiveFileName = "${project.name}.jar"
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    
    manifest {
        attributes(
            'Main-Class': 'unila.UnilaMod'
        )
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs += ['-Xlint:deprecation']
}

task deploy(type: Copy, dependsOn: jar) {
    description = 'Copy JAR to Mindustry mods folder'
    from jar
    into getBuildDir().toString() + "/libs"
}

// Helper to find Mindustry mods directory
static def getMindustryModsDir() {
    def os = System.getProperty("os.name").toLowerCase()
    if (os.contains("win")) {
        return System.getenv("APPDATA") + "/Mindustry/mods/"
    } else if (os.contains("mac")) {
        return System.getProperty("user.home") + "/Library/Application Support/Mindustry/mods/"
    } else {
        return System.getProperty("user.home") + "/.local/share/Mindustry/mods/"
    }
}